CS224
Lab No : 1
Section No : 6
Your Full Name : Abdullah Riaz
Bilkent ID : 22001296
Date : 20/02/2022

########### Part 1 CreateArrayAndTwist ###################
.text
	# Take Input
	la $a0, prompt 
	li $v0, 4
	syscall
     
     	#Read Input
     	li $v0, 5
     	syscall
     	
     	#size stored at s0
     	move $s0, $v0
     	
     	#check count of inputs
     	addi $t0, $0, 0
     	
     	#manage array address
     	addi $t1, $0, 0
	
loop:
     	beq $t0, $s0, printArr
     	la $a0, elementValIn 
	li $v0, 4
        syscall
	   
	#Read Input
     	li $v0, 5
     	syscall
     	   
     	sb $v0, array($t1)
 	addi $t1, $t1, 4
 	addi $t0, $t0, 1
	j loop
     	   
     	addi $t2, $0, 0
	addi $t3, $0, 0
   
printArr:
	beq $t2, $s0, checkEvenOdd
	lw $a0, array($t3)
	li $v0, 1
	syscall
	li $v0, 4
	la $a0, newline		
	syscall
	addi $t3, $t3, 4
 	addi $t2, $t2, 1
	j printArr

checkEvenOdd:
	andi $t4, $s0, 0x0001       #check if even or odd
	
	bne $t4, 1, even 
	addi $t0, $0, 0
	addi $t1, $0, 0
	la $t0, array		#t0 has head of array
	addi $t1, $s0, -1
	sll $t1, $t1, 2 
	add $t1, $t0 , $t1     #t1 has bottom of array
	
	add $t5, $t1, $t0
	srl $t5, $t5, 1      #t5 is mid
	addi $t5, $t5, 4     # get arr[mid+1] element  
	addi $t6, $t5, -4	#arr[mid] 
	j loop2	
	
	
even: 
	addi $t6, $t6, 0
 	addi $t0, $0, 0
	addi $t1, $0, 0
	la $t0, array		#t0 has start of array
	addi $t1, $s0, -1
	sll $t1, $t1, 2 
	add $t1, $t0 , $t1     #t1 has end of array
	add $t5, $t1, $t0
	srl $t5, $t5, 1
	addi $t5, $t5, 2       #t5 is mid
	addi $t6, $t5, 0	#copy of t5
	
loop2:
	bgt $t5, $t1, loop3
	lw $a0, ($t5)
	li $v0, 1
	syscall
	addi $t5, $t5, 4
	j loop2
	
loop3:
	bge $t0, $t6, exit
	lw $a0, ($t0)
	li $v0, 1
	syscall
	addi $t0, $t0, 4
	j loop2

exit:
	li $v0, 10
	syscall	
	

			
.data
	array: .space 80
	prompt:	.asciiz "Enter Number of Elements: "
	elementValIn: .ascii "Enter Value: " 
	newline: .asciiz "\n" 



########### Part 2 CheckIfBothHalfsIdentical ###################

.text
	# Take Input
	la $a0, prompt 
	li $v0, 4
	syscall
     
     	#Read Input
     	li $v0, 5
     	syscall
     	
     	#size stored at s0
     	move $s0, $v0
     	
     	#check count of inputs
     	addi $t0, $0, 0
     	
     	#manage array address
     	addi $t1, $0, 0
	
loop:
     	beq $t0, $s0, checkEvenOdd
     	la $a0, elementValIn 
	li $v0, 4
        syscall
	   
	#Read Input
     	li $v0, 5
     	syscall
     	   
     	sb $v0, array($t1)
 	addi $t1, $t1, 4
 	addi $t0, $t0, 1
	j loop
     	   
checkEvenOdd:
	andi $t4, $s0, 0x0001       #check if even or odd
	
	bne $t4, 1, even 
	addi $t0, $0, 0
	addi $t1, $0, 0
	la $t0, array		#t0 has head of array
	addi $t1, $s0, -1
	sll $t1, $t1, 2 
	add $t1, $t0 , $t1     #t1 has bottom of array
	
	add $t5, $t1, $t0
	srl $t5, $t5, 1      #t5 is mid
	addi $t5, $t5, 4     # get arr[mid+1] element  
	addi $t6, $t5, -4	#arr[mid] 
	j checkHalf	
	
	
even: 
	addi $t6, $t6, 0
 	addi $t0, $0, 0
	addi $t1, $0, 0
	la $t0, array		#t0 has start of array
	addi $t1, $s0, -1
	sll $t1, $t1, 2 
	add $t1, $t0 , $t1     #t1 has end of array
	add $t5, $t1, $t0
	srl $t5, $t5, 1
	addi $t5, $t5, 2       #t5 is mid
	addi $t6, $t5, 0	#copy of t5


checkHalf:
	bge $t0, $t6, equalHalf 
	lw $t7, ($t0)
	lw $t8, ($t5)
	bne $t8, $t7, notEqualHalf
	addi $t5, $t5, 4
	addi $t0, $t0, 4
	j checkHalf
		
equalHalf:
	li $v0, 4
	la $a0, equal
	syscall
	j exit

notEqualHalf:
	li $v0, 4
	la $a0, notequal
	syscall
	j exit

exit:
	li $v0, 10
	syscall	
	
	
.data
	array: .space 80
	prompt:	.asciiz "Enter Number of Elements: "
	elementValIn: .ascii "Enter Value: " 
	newline: .asciiz "\n" 
	equal: .asciiz "Equal Havles" 
	notequal: .asciiz "Not Equal Havles" 



########### Part 3 ArithmeticExpression ###################

.text
	la $a0, aVal
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	addi $s0, $v0, 0	#s0 is a
	
	la $a0, bVal
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	addi $s1, $v0, 0    #s1 is b
	
	la $a0, cVal
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	addi $s2, $v0, 0      #s2 is c
	
	sub $t0, $s1, $s2    # b - c
	mul $t1, $s0, $t0    # a * (b-c)
	addi $s3, $s3, 16
	addi $t3, $t1, 0    
	
lessThanSixteen:
	slt $t4, $t1 ,$s3
	beq  $t4, 1 , done
	
loop:
	slti  $t2, $t3, 0    #t3 = reminder 
	beq  $t2, 1 , done
	addi $t4, $0, 0
	sub $t1 , $t1, $s3  #t1 = dividend,  $s3 = divisor
	sub $t3 , $t1, $s3
	j loop
	
done:
	li $v0, 4
	la $a0, answer		
	syscall
    	move $a0, $t1
	li $v0, 1
	syscall
	
.data
	aVal:	.asciiz "Enter a: "
	bVal:	.asciiz "Enter b: "
	cVal:	.asciiz "Enter c: "
	answer:	.asciiz "Reminder: " 